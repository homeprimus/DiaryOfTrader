// <auto-generated />
using System;
using DiaryOfTrader.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiaryOfTrader.Core.Migrations
{
    [DbContext(typeof(DiaryOfTraderCtx))]
    partial class DiaryOfTraderCtxModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("DiaryOfTrader.Core.Entity.Diary", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Daily")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emotions")
                        .HasColumnType("TEXT");

                    b.Property<long>("EnteredID")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ExchangeID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Monthly")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SymbolID")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TraderResultID")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TrendID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("EnteredID");

                    b.HasIndex("ExchangeID");

                    b.HasIndex("SymbolID");

                    b.HasIndex("TraderResultID");

                    b.HasIndex("TrendID");

                    b.ToTable("Diary");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiaryOfTrader.Core.Entity.Exchange", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Exchange");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiaryOfTrader.Core.Entity.MarketReview", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("SymbolID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("SymbolID");

                    b.ToTable("MarketReview");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiaryOfTrader.Core.Entity.ScreenShot", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DiaryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("DiaryID");

                    b.ToTable("ScreenShot");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiaryOfTrader.Core.Entity.Symbol", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Symbol");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiaryOfTrader.Core.Entity.TimeFrame", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Frame");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiaryOfTrader.Core.Entity.TraderRegion", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Region");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiaryOfTrader.Core.Entity.TraderResult", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Result");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiaryOfTrader.Core.Entity.TraderSession", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RegionID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SummerFinished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SummerStarting")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WinterFinished")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WinterStarting")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("RegionID");

                    b.ToTable("Session");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiaryOfTrader.Core.Entity.Trend", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Trend");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DiaryOfTrader.Core.Entity.Diary", b =>
                {
                    b.HasOne("DiaryOfTrader.Core.Entity.TimeFrame", "Entered")
                        .WithMany()
                        .HasForeignKey("EnteredID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiaryOfTrader.Core.Entity.Exchange", "Exchange")
                        .WithMany()
                        .HasForeignKey("ExchangeID");

                    b.HasOne("DiaryOfTrader.Core.Entity.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiaryOfTrader.Core.Entity.TraderResult", "TraderResult")
                        .WithMany()
                        .HasForeignKey("TraderResultID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiaryOfTrader.Core.Entity.Trend", "Trend")
                        .WithMany()
                        .HasForeignKey("TrendID");

                    b.Navigation("Entered");

                    b.Navigation("Exchange");

                    b.Navigation("Symbol");

                    b.Navigation("TraderResult");

                    b.Navigation("Trend");
                });

            modelBuilder.Entity("DiaryOfTrader.Core.Entity.MarketReview", b =>
                {
                    b.HasOne("DiaryOfTrader.Core.Entity.Symbol", "Symbol")
                        .WithMany()
                        .HasForeignKey("SymbolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symbol");
                });

            modelBuilder.Entity("DiaryOfTrader.Core.Entity.ScreenShot", b =>
                {
                    b.HasOne("DiaryOfTrader.Core.Entity.Diary", null)
                        .WithMany("Screenshot")
                        .HasForeignKey("DiaryID");
                });

            modelBuilder.Entity("DiaryOfTrader.Core.Entity.TraderSession", b =>
                {
                    b.HasOne("DiaryOfTrader.Core.Entity.TraderRegion", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("DiaryOfTrader.Core.Entity.Diary", b =>
                {
                    b.Navigation("Screenshot");
                });
#pragma warning restore 612, 618
        }
    }
}
